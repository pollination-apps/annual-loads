---
name: CI

on: [push, pull_request]

jobs:

  generate-app-name:
    name: Generate App name
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        
      - name: Generate App name
        id: generate_app_name
        run: |
          repo_name=${{ github.event.repository.name }}
          echo $repo_name
          lowercase_repo_name=${repo_name,,}
          echo $lowercase_repo_name
          echo "::set-output name=app-name::$lowercase_repo_name"

    outputs:
      app-name: ${{ steps.generate_app_name.outputs.app-name }}

  test-docker:
    name: Test Docker build
    runs-on: ubuntu-latest
    needs: generate-app-name
    if: github.ref != 'refs/heads/production'
    steps:
      - uses: actions/checkout@v2

      - name: Build docker image
        env:
          OPENSTUDIO_VERSION: '3.4.0'
          OPENSTUDIO_DOWNLOAD_URL: 'https://github.com/NREL/OpenStudio/releases/download/v3.4.0/OpenStudio-3.4.0+4bd816f785-Ubuntu-20.04.tar.gz'
          OPENSTUDIO_TAR_FILENAME: 'openstudio.tar.gz'
          OPENSTUDIO_FILENAME: 'openstudio'
        run: |
          curl -SL -o $OPENSTUDIO_TAR_FILENAME $OPENSTUDIO_DOWNLOAD_URL
          tar zxvf $OPENSTUDIO_TAR_FILENAME
          mv OpenStudio-*-Ubuntu-*/ $OPENSTUDIO_FILENAME
          docker build . --file Dockerfile --tag ${{needs.generate-app-name.outputs.app-name}}:latest --build-arg OPENSTUDIO_VERSION=$OPENSTUDIO_VERSION --build-arg OPENSTUDIO_FILENAME=$OPENSTUDIO_FILENAME

  release-on-github:
    name: Deploy to GitHub
    runs-on: ubuntu-latest
    needs: test-docker
    if: github.ref == 'refs/heads/master' && github.event.repository.owner.name == 'pollination-apps'
    steps:
      - uses: actions/checkout@v2

      - name: set up node
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 14.2.0

      - name: install semantic-release
        run: npm install @semantic-release/exec

      - name: run semantic release
        id: new_release
        run: |
          nextRelease="`npx semantic-release@^17.0.0 --dryRun | grep -oP 'Published release \K.*? ' || true`"
          npx semantic-release@^17.0.0
          echo "::set-output name=tag::$nextRelease"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      tag: ${{ steps.new_release.outputs.tag }}

  deploy-to-staging:
    name: Deploy to Pollination Staging
    runs-on: ubuntu-latest
    needs: [generate-app-name, release-on-github]
    if: ${{github.ref == 'refs/heads/master' && github.event.repository.owner.name == 'pollination-apps' && contains(needs.release-on-github.outputs.tag, '.')}}
    steps:
      - uses: actions/checkout@v2

      - name: set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: install dev requirements
        run: pip install -r dev-requirements.txt

      - name: deploy to staging
        run: pollination-apps deploy app --tag ${{needs.release-on-github.outputs.tag}} --owner ladybug-tools -n ${{github.event.repository.name}} -e staging -m "${{github.event.commits[0].message}}"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POLLINATION_TOKEN: ${{ secrets.POLLINATION_STAGING_TOKEN }}

  deploy-to-production:
    name: Deploy to Pollination Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' && github.event.repository.owner.name == 'pollination-apps'
    steps:
      - uses: actions/checkout@v2
        with:
          ref: production
          fetch-depth: 0

      - name: set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Get Job Context
        id: get-context
        run: |
          TAG=$(git describe --tags | sed 's/v//')
          echo "Releasing tag: ${TAG:?}"
          echo "::set-output name=tag::$TAG"

      - name: install dev requirements
        run: pip install -r dev-requirements.txt

      - name: deploy to production
        run: |
          TAG=$(echo "${TAG:?}" | sed 's/[[:space:]]//g')
          TAG=${TAG%%-*}
          echo $TAG
          pollination-apps deploy app --tag $TAG --owner ladybug-tools -n ${{github.event.repository.name}} -e production -m "${{github.event.commits[0].message}}"

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POLLINATION_TOKEN: ${{ secrets.POLLINATION_LADYBUGBOT_TOKEN }}
          TAG: ${{ steps.get-context.outputs.tag }}
